ctmc

// incoming rate
const double lambda = 5;    //const double lambda = 5.0;

const double num_stations = 5;    //const double num_stations = 5.0;

const double unif_prob = 1 / (num_stations + 1.0);

// service station rates
const double mu_0 = 0.0;
const double mu_1 = 1.0;
const double mu_2 = 2.0;
const double mu_3 = 3.0;
const double mu_4 = 4.0;
const double mu_5 = 5.0;
const double sum_mu = mu_0 + mu_1 + mu_2 + mu_3 + mu_4 + mu_5;

// routing matrix
const double r_0_0 = mu_0 / sum_mu;
const double r_0_1 = mu_1 / sum_mu;
const double r_0_2 = mu_2 / sum_mu;
const double r_0_3 = mu_3 / sum_mu;
const double r_0_4 = mu_4 / sum_mu;
const double r_0_5 = mu_5 / sum_mu;

const double r_1_0 = unif_prob;
const double r_1_1 = unif_prob;
const double r_1_2 = unif_prob;
const double r_1_3 = unif_prob;
const double r_1_4 = unif_prob;
const double r_1_5 = unif_prob;

const double r_2_0 = unif_prob;
const double r_2_1 = unif_prob;
const double r_2_2 = unif_prob;
const double r_2_3 = unif_prob;
const double r_2_4 = unif_prob;
const double r_2_5 = unif_prob;

const double r_3_0 = unif_prob;
const double r_3_1 = unif_prob;
const double r_3_2 = unif_prob;
const double r_3_3 = unif_prob;
const double r_3_4 = unif_prob;
const double r_3_5 = unif_prob;

const double r_4_0 = unif_prob;
const double r_4_1 = unif_prob;
const double r_4_2 = unif_prob;
const double r_4_3 = unif_prob;
const double r_4_4 = unif_prob;
const double r_4_5 = unif_prob;

const double r_5_0 = unif_prob;
const double r_5_1 = unif_prob;
const double r_5_2 = unif_prob;
const double r_5_3 = unif_prob;
const double r_5_4 = unif_prob;
const double r_5_5 = unif_prob;

const double lambda_1 = lambda*r_0_1;
const double lambda_2 = lambda*r_0_2;
const double lambda_3 = lambda*r_0_3;
const double lambda_4 = lambda*r_0_4;
const double lambda_5 = lambda*r_0_5;

global s_1: int init 0;
global s_2: int init 0;
global s_3: int init 0;
global s_4: int init 0;
global s_5: int init 0;

// distribute incoming tokens to queues
module incoming

  [] true -> lambda_1 : (s_1'=s_1+1)
           + lambda_2 : (s_2'=s_2+1)
           + lambda_3 : (s_3'=s_3+1)
           + lambda_4 : (s_4'=s_4+1)
           + lambda_5 : (s_5'=s_5+1);
endmodule

module queue_1
  [] s_1>0 -> mu_1*r_1_0 : (s_1'=s_1-1)
            + mu_1*r_1_2 : (s_1'=s_1-1) & (s_2'=s_2+1)
            + mu_1*r_1_3 : (s_1'=s_1-1) & (s_3'=s_3+1)
            + mu_1*r_1_4 : (s_1'=s_1-1) & (s_4'=s_4+1)
            + mu_1*r_1_5 : (s_1'=s_1-1) & (s_5'=s_5+1);
endmodule


module queue_2
  [] s_2>0 -> mu_2*r_2_0 : (s_2'=s_2-1)
            + mu_2*r_2_1 : (s_2'=s_2-1) & (s_1'=s_1+1)
            + mu_2*r_2_3 : (s_2'=s_2-1) & (s_3'=s_3+1)
            + mu_2*r_2_4 : (s_2'=s_2-1) & (s_4'=s_4+1)
            + mu_2*r_2_5 : (s_2'=s_2-1) & (s_5'=s_5+1);
endmodule

module queue_3
  [] s_3>0 -> mu_3*r_3_0 : (s_3'=s_3-1)
            + mu_3*r_3_1 : (s_3'=s_3-1) & (s_1'=s_1+1)
            + mu_3*r_3_2 : (s_3'=s_3-1) & (s_2'=s_2+1)
            + mu_3*r_3_4 : (s_3'=s_3-1) & (s_4'=s_4+1)
            + mu_3*r_3_5 : (s_3'=s_3-1) & (s_5'=s_5+1);
endmodule

module queue_4
  [] s_4>0 -> mu_4*r_4_0 : (s_4'=s_4-1)
            + mu_4*r_4_1 : (s_4'=s_4-1) & (s_1'=s_1+1)
            + mu_4*r_4_2 : (s_4'=s_4-1) & (s_2'=s_2+1)
            + mu_4*r_4_3 : (s_4'=s_4-1) & (s_3'=s_3+1)
            + mu_4*r_4_5 : (s_4'=s_4-1) & (s_5'=s_5+1);
endmodule

module queue_5
  [] s_5>0 -> mu_5*r_5_0 : (s_5'=s_5-1)
            + mu_5*r_5_1 : (s_5'=s_5-1) & (s_1'=s_1+1)
            + mu_5*r_5_2 : (s_5'=s_5-1) & (s_2'=s_2+1)
            + mu_5*r_5_3 : (s_5'=s_5-1) & (s_3'=s_3+1)
            + mu_5*r_5_4 : (s_5'=s_5-1) & (s_4'=s_4+1);
endmodule
